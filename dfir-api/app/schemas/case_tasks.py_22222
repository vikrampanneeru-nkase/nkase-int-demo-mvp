from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class CaseTaskBase(BaseModel):
    case_id: str
    priority: str
    status: str
    assigned_to: Optional[str] = None
    due_date: Optional[datetime] = None
    notes: Optional[str] = None
    completed_at: Optional[datetime] = None
    completed_by: Optional[str] = None
    job_id: Optional[str] = None
    action: Optional[str] = None
    description: Optional[str] = None

class CaseTaskCreate(CaseTaskBase):
    created_at: datetime  # Required during creation

class CaseTaskUpdate(BaseModel):
    priority: Optional[str] = None
    status: Optional[str] = None
    assigned_to: Optional[str] = None
    due_date: Optional[datetime] = None
    notes: Optional[str] = None
    completed_at: Optional[datetime] = None
    completed_by: Optional[str] = None
    updated_at: Optional[datetime] = None
    job_id: Optional[str] = None
    action: Optional[str] = None
    description: Optional[str] = None

class CaseTaskOut(CaseTaskBase):
    id: int
    created_at: datetime
    updated_at: Optional[datetime] = None

    class Config:
        orm_mode = True

