import React, { useEffect, useRef, useState } from "react";

interface MalwareAnalysisTerminalBoxProps {
  caseNumber: string;
  open: boolean;
  onClose: () => void;
}

const MalwareAnalysisTerminalBox: React.FC<MalwareAnalysisTerminalBoxProps> = ({
  caseNumber,
  open,
  onClose,
}) => {
  const [logs, setLogs] = useState<string[]>(["[+] Waiting for logs..."]);
  const terminalRef = useRef<HTMLDivElement>(null);
  const wsRef = useRef<WebSocket | null>(null);

  useEffect(() => {
    if (!open || !caseNumber) return;

    const wsUrl = `ws://ec2-54-196-221-208.compute-1.amazonaws.com:8000/ws/investigations/nkase/logs?case_number=${caseNumber}`;
    const ws = new WebSocket(wsUrl);
    wsRef.current = ws;

    setLogs(["[+] Connecting to backend..."]);

    ws.onopen = () => {
      setLogs((prev) => [...prev, "[+] WebSocket connection established"]);
    };

    ws.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        const flatLine = Object.entries(data)
          .filter(([_, v]) => v !== null && v !== undefined)
.map(([k, v]) =>
  typeof v === "object" && v !== null
    ? Object.entries(v || {})
        .map(([subKey, subVal]) => `${k}.${subKey}="${subVal}"`)
        .join(" ")
    : `${k}=${v}`
)
          .join(" ");
        setLogs((prev) => [...prev, flatLine]);
      } catch (e) {
        setLogs((prev) => [...prev, `Invalid message: ${event.data}`]);
      }
    };

    ws.onerror = (err) => {
      console.error("[WebSocket] Error:", err);
      setLogs((prev) => [...prev, "[!] WebSocket error"]);
    };

    ws.onclose = () => {
      setLogs((prev) => [...prev, "[x] WebSocket closed"]);
    };

    return () => {
      ws.close();
    };
  }, [caseNumber, open]);

  // Auto scroll
  useEffect(() => {
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;
    }
  }, [logs]);

  if (!open) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60">
      <div
        className="bg-[#181c20] rounded-2xl shadow-2xl w-full max-w-4xl relative border border-[#23272e] flex flex-col"
        style={{ height: "80vh", maxHeight: "80vh" }} // fixed modal height
      >
        {/* Header */}
        <div className="flex items-center justify-between px-6 py-4 border-b border-[#23272e] bg-[#23272e] rounded-t-2xl">
          <span className="text-lg font-bold text-white">
            Malware Analysis Logs:{" "}
            <span className="text-cyan-400">{caseNumber}</span>
          </span>
        </div>
 <div className="px-6 pt-3 pb-1 text-gray-300 text-sm border-b border-[#23272e] bg-[#23272e]">
          Perform malware analysis on the forensics copy of the resource to
          identify malicious files and code
        </div>

        {/* Body */}
        <div className="flex flex-1 overflow-hidden">
          {/* Side Panel */}
          <div className="flex flex-col justify-between bg-[#181c20] p-6 w-1/3 border-r border-[#23272e]">
            <div>
              <div className="text-base font-semibold text-white mb-2">Running forensics analysis</div>
              <div className="text-sm text-gray-400">Using SWIFT workstation</div>
            </div>
            <button
              onClick={() => {
                wsRef.current?.close();
                onClose();
              }}
              className="mt-8 bg-red-600 hover:bg-red-700 text-white font-semibold px-4 py-2 rounded-lg"
            >
              Close
            </button>
          </div>

          {/* Terminal Logs */}
          <div className="flex-1 bg-[#101215] p-4 overflow-y-auto" ref={terminalRef}>
            <pre className="text-green-400 text-xs font-mono whitespace-pre-wrap">
              {logs.join("\n\n")}
            </pre>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MalwareAnalysisTerminalBox;

