import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useRef, useState } from "react";
const MalwareAnalysisTerminalBox = ({ caseNumber, open, onClose, }) => {
    const [logs, setLogs] = useState(["[+] Waiting for logs..."]);
    const terminalRef = useRef(null);
    const wsRef = useRef(null);
    useEffect(() => {
        if (!open || !caseNumber)
            return;
        const wsUrl = `ws://ec2-54-196-221-208.compute-1.amazonaws.com:8000/ws/investigations/nkase/logs?case_number=${caseNumber}`;
        const ws = new WebSocket(wsUrl);
        wsRef.current = ws;
        setLogs(["[+] Connecting to backend..."]);
        ws.onopen = () => {
            setLogs((prev) => [...prev, "[+] WebSocket connection established"]);
        };
        ws.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                const flatLine = Object.entries(data)
                    .filter(([_, v]) => v !== null && v !== undefined)
                    .map(([k, v]) => typeof v === "object" && v !== null
                    ? Object.entries(v || {})
                        .map(([subKey, subVal]) => `${k}.${subKey}="${subVal}"`)
                        .join(" ")
                    : `${k}=${v}`)
                    .join(" ");
                setLogs((prev) => [...prev, flatLine]);
            }
            catch (e) {
                setLogs((prev) => [...prev, `Invalid message: ${event.data}`]);
            }
        };
        ws.onerror = (err) => {
            console.error("[WebSocket] Error:", err);
            setLogs((prev) => [...prev, "[!] WebSocket error"]);
        };
        ws.onclose = () => {
            setLogs((prev) => [...prev, "[x] WebSocket closed"]);
        };
        return () => {
            ws.close();
        };
    }, [caseNumber, open]);
    // Auto scroll
    useEffect(() => {
        if (terminalRef.current) {
            terminalRef.current.scrollTop = terminalRef.current.scrollHeight;
        }
    }, [logs]);
    if (!open)
        return null;
    return (_jsx("div", { className: "fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60", children: _jsxs("div", { className: "bg-[#181c20] rounded-2xl shadow-2xl w-full max-w-4xl relative border border-[#23272e] flex flex-col", style: { height: "80vh", maxHeight: "80vh" }, children: [_jsx("div", { className: "flex items-center justify-between px-6 py-4 border-b border-[#23272e] bg-[#23272e] rounded-t-2xl", children: _jsxs("span", { className: "text-lg font-bold text-white", children: ["Malware Analysis Logs:", " ", _jsx("span", { className: "text-cyan-400", children: caseNumber })] }) }), _jsx("div", { className: "px-6 pt-3 pb-1 text-gray-300 text-sm border-b border-[#23272e] bg-[#23272e]", children: "Perform malware analysis on the forensics copy of the resource to identify malicious files and code" }), _jsxs("div", { className: "flex flex-1 overflow-hidden", children: [_jsxs("div", { className: "flex flex-col justify-between bg-[#181c20] p-6 w-1/3 border-r border-[#23272e]", children: [_jsxs("div", { children: [_jsx("div", { className: "text-base font-semibold text-white mb-2", children: "Running forensics analysis" }), _jsx("div", { className: "text-sm text-gray-400", children: "Using SWIFT workstation" })] }), _jsx("button", { onClick: () => {
                                        wsRef.current?.close();
                                        onClose();
                                    }, className: "mt-8 bg-red-600 hover:bg-red-700 text-white font-semibold px-4 py-2 rounded-lg", children: "Close" })] }), _jsx("div", { className: "flex-1 bg-[#101215] p-4 overflow-y-auto", ref: terminalRef, children: _jsx("pre", { className: "text-green-400 text-xs font-mono whitespace-pre-wrap", children: logs.join("\n\n") }) })] })] }) }));
};
export default MalwareAnalysisTerminalBox;
