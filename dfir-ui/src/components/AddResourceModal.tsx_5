import React, { useState } from "react";
import { Dialog } from "@headlessui/react";

interface AddResourceModalProps {
  isOpen: boolean;
  onClose: () => void;
  resourceData: ResourcesResponse | null;
  onSubmit: (payload: {
    resourceId: string;
    title: string;
    priority: string;
    cloud: string;
    resourceType: string;
    userId: string;
  }) => Promise<void>;
}

interface EC2Instance {
  InstanceId: string;
  InstanceType: string;
  State: string;
  PrivateIpAddress: string;
  AvailabilityZone: string;
  Tags?: { Key: string; Value: string }[];
  is_quarantined: boolean;
}

interface S3Bucket {
  Name: string;
  Region: string;
  CreationDate: string;
}

interface User {
  user_id: string;
  account_name: string;
}

interface ResourcesResponse {
  EC2: EC2Instance[];
  S3: S3Bucket[];
  DynamoDB: any[];
  Users: User[];
}

const AddResourceModal: React.FC<AddResourceModalProps> = ({ isOpen, onClose, resourceData, onSubmit }) => {
  const [resourceType, setResourceType] = useState("EC2");
  const [resourceId, setResourceId] = useState("");
  const [title, setTitle] = useState("");
  const [priority, setPriority] = useState("Low");
  const [userId, setUserId] = useState("");
  const cloud = "AWS";

  const handleSubmit = () => {
    if (!resourceId || !title || !priority || !userId) {
      alert("Please fill in all fields");
      return;
    }
    onSubmit({ resourceId, title, priority, cloud, resourceType, userId }).then(() => {
      setResourceId("");
      setTitle("");
      setPriority("Low");
      setUserId("");
      setResourceType("EC2");
      onClose();
    });
  };

  const renderResourceOptions = () => {
    if (resourceType === "EC2") {
      return (
        <select
          value={resourceId}
          onChange={(e) => setResourceId(e.target.value)}
          className="w-full border p-2 rounded bg-gray-50"
        >
          <option value="">-- Select EC2 Instance --</option>
          {resourceData?.EC2.map((res) => (
            <option key={res.InstanceId} value={res.InstanceId}>
              {res.Tags?.find((tag) => tag.Key === "Name")?.Value || res.InstanceId}
            </option>
          ))}
        </select>
      );
    }
    if (resourceType === "S3") {
      return (
        <select
          value={resourceId}
          onChange={(e) => setResourceId(e.target.value)}
          className="w-full border p-2 rounded bg-gray-50"
        >
          <option value="">-- Select S3 Bucket --</option>
          {resourceData?.S3.map((bucket) => (
            <option key={bucket.Name} value={bucket.Name}>
              {bucket.Name}
            </option>
          ))}
        </select>
      );
    }
    if (resourceType === "DynamoDB") {
      return (
        <input
          type="text"
          placeholder="Enter DynamoDB table name"
          value={resourceId}
          onChange={(e) => setResourceId(e.target.value)}
          className="w-full border p-2 rounded bg-gray-50"
        />
      );
    }
    return null;
  };

  return (
    <Dialog open={isOpen} onClose={onClose} className="fixed z-50 inset-0 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen px-4">
        <div className="fixed inset-0 bg-black opacity-30" />
        <div className="bg-white text-black rounded-lg p-6 max-w-3xl w-full relative z-10">
          <Dialog.Title className="text-lg font-bold mb-2">Add Resource to Investigation</Dialog.Title>
          <p className="text-sm text-gray-700 mb-4">
            Add a cloud resource to this investigation for analysis and forensic examination.
          </p>

          <div className="mb-4">
            <label className="block text-xs font-medium text-gray-700 mb-1">Cloud Provider</label>
            <input className="w-full border p-2 rounded bg-gray-50" value="Amazon Web Services" disabled />
          </div>

          <div className="mb-4">
            <label className="block text-xs font-medium text-gray-700 mb-1">Resource Type</label>
            <select
              value={resourceType}
              onChange={(e) => {
                setResourceType(e.target.value);
                setResourceId("");
              }}
              className="w-full border p-2 rounded bg-gray-50"
            >
              <option value="EC2">EC2 Instance</option>
              <option value="S3">S3 Bucket</option>
              <option value="DynamoDB">DynamoDB Table</option>
            </select>
          </div>

          <div className="mb-4">
            <label className="block text-xs font-medium text-gray-700 mb-1">Select Resource</label>
            {renderResourceOptions()}
          </div>

          <div className="mb-4">
            <label className="block text-xs font-medium text-gray-700 mb-1">Title</label>
            <input
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="w-full border p-2 rounded bg-gray-50"
              placeholder="Enter a title"
            />
          </div>

          <div className="mb-4">
            <label className="block text-xs font-medium text-gray-700 mb-1">Priority</label>
            <select
              value={priority}
              onChange={(e) => setPriority(e.target.value)}
              className="w-full border p-2 rounded bg-gray-50"
            >
              <option value="Low">Low</option>
              <option value="Medium">Medium</option>
              <option value="High">High</option>
            </select>
          </div>

          <div className="mb-6">
            <label className="block text-xs font-medium text-gray-700 mb-1">Assign To (User)</label>
            <select
              value={userId}
              onChange={(e) => setUserId(e.target.value)}
              className="w-full border p-2 rounded bg-gray-50"
            >
              <option value="">-- Select User --</option>
              {resourceData?.Users.map((user) => (
                <option key={user.user_id} value={user.user_id}>
                  {user.user_id} ({user.account_name})
                </option>
              ))}
            </select>
          </div>

          <div className="mt-6 flex justify-end gap-3">
            <button onClick={onClose} className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400">
              Cancel
            </button>
            <button
              onClick={handleSubmit}
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              Add Resource
            </button>
          </div>
        </div>
      </div>
    </Dialog>
  );
};

export default AddResourceModal;

