import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { useState } from "react";
import { fetcher } from "../api/fetcher";
import { Server, CircleCheck, CircleX, MapPin, Cpu, Database, FolderOpen } from "lucide-react";
export default function Investigations() {
    const [filter, setFilter] = useState("all");
    const { data: ec2Data, isLoading: ec2Loading, error: ec2Error, } = useQuery({
        queryKey: ["investigations"],
        queryFn: () => fetcher("investigations"),
    });
    const { data: s3Data, isLoading: s3Loading, error: s3Error, } = useQuery({
        queryKey: ["s3"],
        queryFn: () => fetcher("investigations/s3"),
    });
    const { data: dynamoData, isLoading: dynamoLoading, error: dynamoError, } = useQuery({
        queryKey: ["dynamodb"],
        queryFn: () => fetcher("investigations/dynamodb"),
    });
    const filteredEC2 = Array.isArray(ec2Data)
        ? ec2Data.filter((instance) => filter === "all" ? true : instance.State === filter)
        : [];
    return (_jsxs("div", { className: "p-6 space-y-10", children: [_jsxs("section", { children: [_jsx("h2", { className: "text-2xl font-bold text-gray-800 mb-4", children: "EC2" }), _jsx("div", { className: "flex space-x-4 mb-6", children: ["all", "running", "stopped"].map((state) => (_jsx("button", { onClick: () => setFilter(state), className: `px-4 py-2 rounded-full text-sm font-medium border ${filter === state
                                ? "bg-blue-600 text-white border-blue-600"
                                : "bg-white text-gray-700 border-gray-300"}`, children: state.charAt(0).toUpperCase() + state.slice(1) }, state))) }), ec2Loading ? (_jsx("div", { className: "text-gray-600", children: "Loading EC2 instances..." })) : ec2Error ? (_jsx("div", { className: "text-red-600", children: "Error loading EC2 data." })) : filteredEC2.length === 0 ? (_jsx("div", { className: "text-gray-500", children: "No instances found." })) : (_jsx("div", { className: "grid md:grid-cols-2 gap-4", children: filteredEC2.map((instance, index) => {
                            const nameTag = instance.Tags?.find((tag) => tag.Key === "Name")?.Value || "Unnamed";
                            const isRunning = instance.State === "running";
                            return (_jsxs("div", { className: "bg-white border border-gray-200 rounded-2xl shadow-sm p-5", children: [_jsxs("div", { className: "flex justify-between items-center mb-2", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Server, { className: "w-5 h-5 text-blue-500" }), _jsx("span", { className: "text-lg font-semibold text-gray-800", children: nameTag })] }), _jsx("div", { className: `flex items-center space-x-1 text-sm font-medium px-2 py-1 rounded-full ${isRunning
                                                    ? "bg-green-100 text-green-800"
                                                    : "bg-red-100 text-red-800"}`, children: isRunning ? (_jsxs(_Fragment, { children: [_jsx(CircleCheck, { className: "w-4 h-4" }), " ", _jsx("span", { children: "Running" })] })) : (_jsxs(_Fragment, { children: [_jsx(CircleX, { className: "w-4 h-4" }), " ", _jsx("span", { children: "Stopped" })] })) })] }), _jsxs("div", { className: "text-sm text-gray-600 space-y-1 mt-2", children: [_jsxs("div", { children: [_jsx("strong", { children: "Instance ID:" }), " ", instance.InstanceId] }), _jsxs("div", { className: "flex items-center", children: [_jsx(Cpu, { className: "w-4 h-4 mr-1 text-gray-500" }), _jsx("span", { children: instance.InstanceType })] }), _jsxs("div", { className: "flex items-center", children: [_jsx(MapPin, { className: "w-4 h-4 mr-1 text-purple-500" }), _jsx("span", { children: instance.AvailabilityZone })] }), _jsxs("div", { children: [_jsx("strong", { children: "Private IP:" }), " ", instance.PrivateIpAddress] }), _jsxs("div", { children: [_jsx("strong", { children: "Public IP:" }), " ", instance.PublicIpAddress || "N/A"] }), _jsxs("div", { className: "flex items-start mt-1 gap-4", children: [_jsxs("div", { children: [_jsx("strong", { children: "Volumes:" }), _jsx("ul", { className: "list-disc list-inside text-sm ml-2", children: instance.VolumeIds?.map((volId) => (_jsx("li", { children: volId }, volId))) || _jsx("li", { children: "None" }) })] }), _jsxs("div", { children: [_jsx("strong", { children: "Security Groups:" }), _jsx("ul", { className: "list-disc list-inside ml-2", children: instance.SecurityGroups.map((sg) => (_jsxs("li", { children: [_jsx("code", { children: sg.GroupName }), " (", sg.GroupId, ")"] }, sg.GroupId))) })] })] })] })] }, index));
                        }) }))] }), _jsxs("section", { children: [_jsx("h2", { className: "text-2xl font-bold text-gray-800 mb-4", children: "S3 Buckets" }), s3Loading ? (_jsx("div", { className: "text-gray-600", children: "Loading S3 buckets..." })) : s3Error ? (_jsx("div", { className: "text-red-600", children: "Error loading S3 buckets." })) : (_jsx("div", { className: "grid md:grid-cols-2 gap-4", children: s3Data?.map((bucket) => (_jsxs("div", { className: "bg-white border border-gray-200 rounded-2xl shadow-sm p-5", children: [_jsxs("div", { className: "flex items-center space-x-2 mb-2", children: [_jsx(FolderOpen, { className: "w-5 h-5 text-yellow-500" }), _jsx("span", { className: "text-lg font-semibold text-gray-800", children: bucket.Name })] }), _jsxs("div", { className: "text-sm text-gray-600", children: [_jsxs("div", { children: [_jsx("strong", { children: "Region:" }), " ", bucket.Region || "N/A"] }), _jsxs("div", { children: [_jsx("strong", { children: "Created:" }), " ", bucket.CreationDate] })] })] }, bucket.Name))) }))] }), _jsxs("section", { children: [_jsx("h2", { className: "text-2xl font-bold text-gray-800 mb-4", children: "DynamoDB Tables" }), dynamoLoading ? (_jsx("div", { className: "text-gray-600", children: "Loading DynamoDB tables..." })) : dynamoError ? (_jsx("div", { className: "text-red-600", children: "Error loading DynamoDB data." })) : (_jsx("div", { className: "grid md:grid-cols-2 gap-4", children: dynamoData?.map((table) => (_jsxs("div", { className: "bg-white border border-gray-200 rounded-2xl shadow-sm p-5", children: [_jsxs("div", { className: "flex items-center space-x-2 mb-2", children: [_jsx(Database, { className: "w-5 h-5 text-green-600" }), _jsx("span", { className: "text-lg font-semibold text-gray-800", children: table.TableName })] }), _jsxs("div", { className: "text-sm text-gray-600 space-y-1", children: [_jsxs("div", { children: [_jsx("strong", { children: "Item Count:" }), " ", table.ItemCount] }), _jsxs("div", { children: [_jsx("strong", { children: "Read Capacity:" }), " ", table.ProvisionedThroughput?.ReadCapacityUnits] }), _jsxs("div", { children: [_jsx("strong", { children: "Write Capacity:" }), " ", table.ProvisionedThroughput?.WriteCapacityUnits] }), _jsxs("div", { children: [_jsx("strong", { children: "Status:" }), " ", table.TableStatus] })] })] }, table.TableName))) }))] })] }));
}
