import { useParams } from "react-router-dom";
import { useQuery } from "@tanstack/react-query";
import { useState } from "react";
import { fetcher } from "../api/fetcher";
import  AddResourceModal  from "../components/AddResourceModal";
interface InvestigationDetail {
  case_number: string;
  title: string;
  description: string;
  priority: "Critical" | "High" | "Medium" | "Low";
  status: "Open" | "In Progress" | "Closed" | "Archived";
  assigned_to: string;
  created_at: string;
  updated_at: string;
  category?: string;
}

interface Task {
  id: number;
  title: string;
  description: string;
  status: string;
  priority: string;
  assigned_to: string;
  created_at: string;
  updated_at: string;
}

interface InvestigationResponse {
  case: InvestigationDetail;
  tasks: Task[];
  reports: any[];
  timeline: any[];
  findings: any[];
}

const priorityBadgeClass = {
  Critical: "bg-red-600 text-white",
  High: "bg-orange-500 text-white",
  Medium: "bg-yellow-400 text-black",
  Low: "bg-green-400 text-black",
};

const statusBadgeClass = {
  Open: "bg-blue-500 text-white",
  "In Progress": "bg-purple-500 text-white",
  Closed: "bg-gray-500 text-white",
  Archived: "bg-gray-700 text-white",
};

export default function NewInvestigationsPage() {
  const { case_number } = useParams<{ case_number?: string }>();
  const [activeTab, setActiveTab] = useState("Overview");
  //const [resourceModalOpen, setResourceModalOpen] = useState(false);
  //const [resourceData, setResourceData] = useState<any[]>([]);
  const [resourceData, setResourceData] = useState({});
const [resourceModalOpen, setResourceModalOpen] = useState(false);

  const { data, isLoading, error } = useQuery<InvestigationResponse>({
    queryKey: ["investigation", case_number],
    queryFn: () => fetcher(`investigations/${case_number}`),
    enabled: !!case_number,
  });

  const handleTabClick = (tab: string) => setActiveTab(tab);

  const handleAddResourceClick = async () => {
    try {
      const res = await fetcher("investigations/resources/available");
      const { EC2 = [], S3 = [], DynamoDB = [] } = response.data || {};
      setResourceData(res);
      setResourceData({ EC2, S3, DynamoDB });
      setResourceModalOpen(true);
    } catch (err) {
      console.error("Error fetching resources:", err);
      alert("Failed to fetch resources.");
    }
	finally {
      setLoading(false);
      setIsModalOpen(true);
    }
  };

  if (!case_number) {
    return (
      <div className="p-6 max-w-2xl mx-auto">
        <h1 className="text-2xl font-bold mb-4">Create New Investigation</h1>
      </div>
    );
  }

  if (isLoading) {
    return <p className="p-6 text-gray-400">Loading investigation details...</p>;
  }

  if (error) {
    return <p className="p-6 text-red-600">Error loading investigation</p>;
  }

  if (!data || !data.case) {
    return <p className="p-6 text-gray-500">No data found for this case.</p>;
  }

  const inv = data.case;

  return (
    <div className="p-6 space-y-6 bg-gradient-to-br from-teal-600 to-indigo-800 min-h-screen text-white">
      <div className="text-sm underline cursor-pointer hover:text-gray-300">
        &larr; Back to investigations
      </div>

      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div className="flex flex-wrap items-center gap-3">
          <h1 className="text-3xl font-bold">{inv.title}</h1>
          <span className={`px-2 py-1 rounded-full text-sm font-semibold ${priorityBadgeClass[inv.priority]}`}>
            {inv.priority}
          </span>
          <span className={`px-2 py-1 rounded-full text-sm font-semibold ${statusBadgeClass[inv.status]}`}>
            {inv.status}
          </span>
        </div>
        <div className="flex flex-wrap gap-2">
          <button className="bg-teal-500 hover:bg-teal-600 rounded px-3 py-1 text-sm">Edit Case</button>
          <button className="bg-teal-500 hover:bg-teal-600 rounded px-3 py-1 text-sm">Generate Report</button>
          <button className="bg-teal-500 hover:bg-teal-600 rounded px-3 py-1 text-sm">Actions</button>
          <button className="bg-teal-500 hover:bg-teal-600 rounded px-3 py-1 text-sm">Communicate</button>
          <button className="bg-red-600 hover:bg-red-700 rounded px-3 py-1 text-sm">
            Isolate All Compromised Resources
          </button>
        </div>
      </div>

      <div className="flex gap-6 border-b border-white/30 pb-2">
        {["Overview", "Resources Under Investigation", "Evidence", "Timeline", "Investigation Tasks"].map((tab) => (
          <button
            key={tab}
            onClick={() => handleTabClick(tab)}
            className={`text-white text-sm ${
              activeTab === tab ? "underline font-semibold" : "hover:underline"
            }`}
          >
            {tab}
          </button>
        ))}
      </div>

      {activeTab === "Resources Under Investigation" && (
        <div className="bg-white text-black rounded-xl p-4 shadow">
          <div className="flex items-center justify-between mb-2">
            <h2 className="font-semibold text-lg">Resources Under Investigation</h2>
            <button
              onClick={handleAddResourceClick}
              className="bg-teal-600 hover:bg-teal-700 text-white rounded px-3 py-1 text-sm"
            >
              + Add Resource
            </button>
          </div>

          <p className="mt-2 text-sm text-gray-600">No resources found yet. Click above to fetch.</p>
        </div>
      )}

      {activeTab === "Overview" && (
        <div className="bg-white text-black rounded-xl p-4 shadow">
          <h2 className="font-semibold text-lg mb-2">Case Overview</h2>
          <p className="text-sm">{inv.description}</p>
        </div>
      )}

      {activeTab === "Timeline" && (
        <div className="bg-white text-black rounded-xl p-4 shadow">
          <h2 className="font-semibold text-lg">Timeline (Coming Soon)</h2>
        </div>
      )}

      {activeTab === "Evidence" && (
        <div className="bg-white text-black rounded-xl p-4 shadow">
          <h2 className="font-semibold text-lg">Evidence (Coming Soon)</h2>
        </div>
      )}

      {activeTab === "Investigation Tasks" && (
        <div className="bg-white text-black rounded-xl p-4 shadow">
          <h2 className="font-semibold text-lg">Investigation Tasks (Coming Soon)</h2>
        </div>
      )}

      <AddResourceModal
        isOpen={resourceModalOpen}
        onClose={() => setResourceModalOpen(false)}
        resourceData={resourceData} 
      />
    </div>
  );
}

