import React, { useState } from "react";
import { useParams } from "react-router-dom";
import { useQuery } from "@tanstack/react-query";
import { fetcher } from "../api/fetcher";
import AddResourceModal from "../components/AddResourceModal";
import { ResourceTypesResponse } from "@/types";

const tabs = [
  { label: "Overview", key: "overview" },
  { label: "Resources", key: "resources" },
  { label: "Evidence", key: "evidence" },
  { label: "Timeline", key: "timeline" },
  { label: "Tasks", key: "tasks" },
];

const formatDate = (dateStr: string) => {
  if (!dateStr || dateStr === "N/A") return "N/A";
  const date = new Date(dateStr);
  return date.toLocaleString("en-IN", {
    year: "numeric",
    month: "short",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  });
};

const fetchCaseDetails = async (case_number: string) => {
  const res = await fetcher(`investigations/${case_number}`);
console.log("rest",res)
  return res;
};

const fetchAllResourceTypes = async () => {
  const res = await fetcher("investigations/resources/available");
  return res;
};

const NewInvestigationsPage = () => {
  const { case_number } = useParams<{ case_number?: string }>();
  const [activeTab, setActiveTab] = useState("overview");
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [resourceData, setResourceData] = useState<ResourceTypesResponse | null>(null);

  const { data, isLoading, error } = useQuery({
    queryKey: ["investigation", case_number],
    queryFn: () => fetchCaseDetails(case_number!),
    enabled: !!case_number,
  });

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-[#0f3d4d] to-[#2d2a80] text-white px-6 py-6 text-sm">
        <p>Loading case details...</p>
      </div>
    );
  }

  if (error || !data) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-[#0f3d4d] to-[#2d2a80] text-white px-6 py-6 text-sm">
        <p className="text-red-500">Failed to load case data.</p>
      </div>
    );
  }

  const caseDetails = data.case;
  const tasks = data.tasks;
  const timeline = data.timeline;

  const {
    title,
    priority,
    status,
    assigned_to,
    description,
    case_number: number,
    created_at,
    updated_at,
  } = caseDetails;

  const handleAddResource = async () => {
    const res = await fetchAllResourceTypes();
    setResourceData(res);
    setIsAddModalOpen(true);
  };

  const renderTabContent = () => {
    switch (activeTab) {
      case "overview":
        return <p>{description}</p>;
      case "resources":
        return (
          <>
            <p>No resources linked yet.</p>
            <button
              className="mt-4 bg-cyan-600 text-white px-4 py-2 rounded hover:bg-cyan-700"
              onClick={handleAddResource}
            >
              ➕ Add Resource
            </button>
          </>
        );
      case "evidence":
        return <p>No evidence uploaded yet.</p>;
      case "timeline":
        return timeline.length ? (
          <ul className="list-disc pl-4">
            {timeline.map((item: any, idx: number) => (
              <li key={idx}>{JSON.stringify(item)}</li>
            ))}
          </ul>
        ) : (
          <p>No timeline data.</p>
        );
      case "tasks":
        return tasks.length ? (
          <ul className="space-y-3">
            {tasks.map((task: any) => (
              <li key={task.id} className="border p-3 rounded bg-white text-black">
                <p className="font-semibold">{task.title}</p>
                <p className="text-sm">{task.description}</p>
                <p className="text-xs text-gray-500">
                  Assigned to: {task.assigned_to} | Status: {task.status}
                </p>
              </li>
            ))}
          </ul>
        ) : (
          <p>No tasks yet.</p>
        );
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#0f3d4d] to-[#2d2a80] text-white px-6 py-6 text-sm">
      <h1 className="text-2xl font-semibold mb-1">{title}</h1>
      <p className="text-md text-gray-300 mb-3">Case #{number}</p>

      <div className="flex gap-2 mb-6">
        <span className="bg-red-600 text-white px-3 py-1 rounded-full text-xs">{priority}</span>
        <span className="bg-cyan-600 text-white px-3 py-1 rounded-full text-xs">{status}</span>
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        <div className="bg-cyan-100 text-black p-4 rounded-xl">
          <p className="text-xs text-gray-500">Assigned To</p>
          <p className="font-medium">👤 {assigned_to}</p>
        </div>
        <div className="bg-cyan-100 text-black p-4 rounded-xl">
          <p className="text-xs text-gray-500">Case Number</p>
          <p className="font-medium">🔢 {number}</p>
        </div>
        <div className="bg-cyan-100 text-black p-4 rounded-xl">
          <p className="text-xs text-gray-500">Created Date</p>
          <p className="font-medium">📅 {formatDate(created_at)}</p>
        </div>
        <div className="bg-cyan-100 text-black p-4 rounded-xl">
          <p className="text-xs text-gray-500">Last Updated</p>
          <p className="font-medium">⏱️ {formatDate(updated_at)}</p>
        </div>
      </div>

      <div className="flex flex-wrap gap-3 mb-4">
        {tabs.map((tab) => (
          <button
            key={tab.key}
            onClick={() => setActiveTab(tab.key)}
            className={`px-4 py-1.5 rounded-full text-sm font-medium ${
              activeTab === tab.key
                ? "bg-purple-700 text-white shadow"
                : "bg-cyan-100 text-black"
            }`}
          >
            {tab.label}
          </button>
        ))}
      </div>

      <div className="bg-cyan-100 text-black p-4 rounded-xl mb-8">{renderTabContent()}</div>

      {resourceData && (
        <AddResourceModal
          isOpen={isAddModalOpen}
          onClose={() => setIsAddModalOpen(false)}
          resourceData={resourceData}
        />
      )}
    </div>
  );
};

export default NewInvestigationsPage;

